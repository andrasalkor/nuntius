pub struct Map {
    pub tiles: Vec<Vec<char>>,
}

impl Map {
    pub fn new() -> Self {
        let tiles = vec![
            vec!['#', '#', '#', '#', '#', '#', '#', '#', '#', '#'],
            vec!['#', '.', '.', '.', '.', '.', '.', '.', '.', '#'],
            vec!['#', '.', '#', '#', '#', '#', '#', '#', '.', '#'],
            vec!['#', '.', '.', '.', '.', '.', '.', '#', '.', '#'],
            vec!['#', '#', '#', '#', '#', '#', '#', '#', '.', '#'],
            vec!['#', '.', '.', '.', '.', '.', '.', '.', '.', '#'],
            vec!['#', '.', '#', '#', '#', '#', '#', '#', '.', '#'],
            vec!['#', '.', '.', '.', '.', '.', '.', '#', '.', '#'],
            vec!['#', '#', '#', '#', '#', '#', '#', '#', '#', '#'],
        ];

        Self { tiles }
    }

    pub fn can_move(&self, x: usize, y: usize) -> bool {
        self.tiles[y][x] != '#'
    }
}
